[
    {
        "id": "greenhouse_main",
        "type": "tab",
        "label": "Greenhouse Integration",
        "disabled": false,
        "info": "Main integration flow for BeaglePlay and ESP32-S3 sensor data"
    },
    {
        "id": "beagleplay_http",
        "type": "http request",
        "z": "greenhouse_main",
        "name": "BeaglePlay Sensors",
        "method": "GET",
        "ret": "obj",
        "paytoformat": "ignore",
        "url": "http://beagleplay.local:8080/api/sensors",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 140,
        "y": 100,
        "wires": [["process_beagleplay"]]
    },
    {
        "id": "esp32_http",
        "type": "http request",
        "z": "greenhouse_main",
        "name": "ESP32-S3 Thermal",
        "method": "GET",
        "ret": "obj",
        "paytoformat": "ignore",
        "url": "http://192.168.1.100/api/thermal",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 140,
        "y": 200,
        "wires": [["process_thermal"]]
    },
    {
        "id": "timer_beagle",
        "type": "inject",
        "z": "greenhouse_main",
        "name": "Poll BeaglePlay",
        "props": [{"p": "payload"}, {"p": "topic", "vt": "str"}],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 60,
        "wires": [["beagleplay_http"]]
    },
    {
        "id": "timer_esp32",
        "type": "inject",
        "z": "greenhouse_main",
        "name": "Poll ESP32-S3",
        "props": [{"p": "payload"}, {"p": "topic", "vt": "str"}],
        "repeat": "15",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 160,
        "wires": [["esp32_http"]]
    },
    {
        "id": "process_beagleplay",
        "type": "function",
        "z": "greenhouse_main",
        "name": "Process BeaglePlay Data",
        "func": "// Extract sensor data from BeaglePlay\nconst sensorData = {\n    ph: msg.payload.ph,\n    temperature_air: msg.payload.temperature,\n    humidity: msg.payload.humidity,\n    vpd_basic: msg.payload.vpd,\n    timestamp: new Date().toISOString(),\n    source: 'beagleplay'\n};\n\n// Store in context for VPD calculation\ncontext.set('beagleplay_data', sensorData);\n\n// Forward to InfluxDB\nmsg.payload = [\n    {\n        measurement: 'sensors',\n        tags: { location: 'greenhouse', source: 'beagleplay' },\n        fields: {\n            ph: sensorData.ph,\n            temperature_air: sensorData.temperature_air,\n            humidity: sensorData.humidity,\n            vpd_basic: sensorData.vpd_basic\n        },\n        timestamp: new Date()\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 100,
        "wires": [["influxdb_out", "calculate_enhanced_vpd"]]
    },
    {
        "id": "process_thermal",
        "type": "function",
        "z": "greenhouse_main",
        "name": "Process Thermal Data",
        "func": "// Extract thermal data from ESP32-S3\nconst thermalData = {\n    temperature_canopy: msg.payload.meanTemp,\n    temperature_min: msg.payload.minTemp,\n    temperature_max: msg.payload.maxTemp,\n    temperature_median: msg.payload.medianTemp,\n    temperature_std: msg.payload.stdDevTemp,\n    timestamp: new Date().toISOString(),\n    source: 'esp32s3'\n};\n\n// Store in context for VPD calculation\ncontext.set('thermal_data', thermalData);\n\n// Forward to InfluxDB\nmsg.payload = [\n    {\n        measurement: 'thermal',\n        tags: { location: 'greenhouse', source: 'esp32s3' },\n        fields: {\n            temperature_canopy: thermalData.temperature_canopy,\n            temperature_min: thermalData.temperature_min,\n            temperature_max: thermalData.temperature_max,\n            temperature_median: thermalData.temperature_median,\n            temperature_std: thermalData.temperature_std\n        },\n        timestamp: new Date()\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 200,
        "wires": [["influxdb_out", "calculate_enhanced_vpd"]]
    },
    {
        "id": "calculate_enhanced_vpd",
        "type": "function",
        "z": "greenhouse_main",
        "name": "Calculate Enhanced VPD",
        "func": "// Get latest data from both sources\nconst beagleData = context.get('beagleplay_data');\nconst thermalData = context.get('thermal_data');\n\n// Only calculate if we have both datasets\nif (!beagleData || !thermalData) {\n    return null;\n}\n\n// Enhanced VPD calculation using canopy temperature\nconst T_air = beagleData.temperature_air;\nconst T_canopy = thermalData.temperature_canopy;\nconst RH = beagleData.humidity;\n\n// Saturation vapor pressure (kPa) - Tetens formula\nfunction calculateSVP(temp) {\n    return 0.6108 * Math.exp(17.27 * temp / (temp + 237.3));\n}\n\nconst svp_air = calculateSVP(T_air);\nconst svp_canopy = calculateSVP(T_canopy);\nconst avp = (RH / 100) * svp_air;\n\n// Enhanced VPD using canopy temperature\nconst vpd_enhanced = Math.max(0, svp_canopy - avp);\n\n// Temperature differential\nconst temp_differential = T_canopy - T_air;\n\n// Create enhanced measurement\nmsg.payload = [\n    {\n        measurement: 'vpd_enhanced',\n        tags: { location: 'greenhouse', calculation: 'enhanced' },\n        fields: {\n            vpd_enhanced: vpd_enhanced,\n            vpd_basic: beagleData.vpd_basic,\n            vpd_improvement: vpd_enhanced - beagleData.vpd_basic,\n            temperature_differential: temp_differential,\n            temperature_air: T_air,\n            temperature_canopy: T_canopy,\n            humidity: RH,\n            ph: beagleData.ph\n        },\n        timestamp: new Date()\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 150,
        "wires": [["influxdb_out", "dashboard_vpd"]]
    },
    {
        "id": "influxdb_out",
        "type": "influxdb out",
        "z": "greenhouse_main",
        "influxdb": "influxdb_config",
        "name": "InfluxDB",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "measurementV18FluxV20": "",
        "bucket": "sensors",
        "org": "greenhouse",
        "x": 800,
        "y": 150,
        "wires": []
    },
    {
        "id": "dashboard_vpd",
        "type": "ui_gauge",
        "z": "greenhouse_main",
        "name": "Enhanced VPD",
        "group": "vpd_group",
        "order": 1,
        "width": 6,
        "height": 4,
        "gtype": "gage",
        "title": "Enhanced VPD (kPa)",
        "label": "kPa",
        "format": "{{msg.payload[0].fields.vpd_enhanced | number:2}}",
        "min": 0,
        "max": 3,
        "colors": ["#00b500","#e6e600","#ca3838"],
        "seg1": 0.8,
        "seg2": 1.5,
        "className": "",
        "x": 820,
        "y": 100,
        "wires": []
    },
    {
        "id": "influxdb_config",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "sensors",
        "name": "Local InfluxDB",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "vpd_group",
        "type": "ui_group",
        "name": "VPD Monitoring",
        "tab": "greenhouse_tab",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "greenhouse_tab",
        "type": "ui_tab",
        "name": "Greenhouse",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]
