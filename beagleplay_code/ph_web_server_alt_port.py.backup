#!/usr/bin/env python3
# Quick fix version using port 8082 instead of 8080

import http.server
import socketserver
import random
import time
import threading
import logging
import os
import json
import requests
import math
from datetime import datetime

# Setup logging
logging.basicConfig(filename='sensor_server.log', level=logging.INFO,
                    format='%(asctime)s - %(message)s')

# Sensor reading functions
def read_sensor_value(device_path, sensor_type):
    try:
        with open(device_path, 'r') as f:
            value = float(f.read().strip())
            # Convert raw value to appropriate units
            if sensor_type == 'temp':
                value = value / 1000.0  # Convert millidegrees to degrees
            elif sensor_type == 'humidity':
                value = value / 1000.0  # Convert millipercent to percent
            elif sensor_type == 'ph':
                # Assuming pH sensor value is already in pH units
                pass
            return value
    except Exception as e:
        logging.error(f"Error reading sensor: {e}")
        return None

def find_iio_devices():
    devices = {}
    iio_path = "/sys/bus/iio/devices/"
    
    try:
        # List all IIO devices
        for device in os.listdir(iio_path):
            if device.startswith("iio:device"):
                device_path = os.path.join(iio_path, device)
                
                # Check if this is a temperature/humidity sensor
                if os.path.exists(os.path.join(device_path, "in_temp_input")):
                    devices["temperature"] = os.path.join(device_path, "in_temp_input")
                
                if os.path.exists(os.path.join(device_path, "in_humidityrelative_input")):
                    devices["humidity"] = os.path.join(device_path, "in_humidityrelative_input")
                    
                # Check for pH sensor (might be different path)
                if os.path.exists(os.path.join(device_path, "in_ph_input")):
                    devices["ph"] = os.path.join(device_path, "in_ph_input")
                    
                # Alternative pH sensor paths
                if os.path.exists(os.path.join(device_path, "in_voltage_input")):
                    devices["ph"] = os.path.join(device_path, "in_voltage_input")
                    
    except Exception as e:
        logging.error(f"Error finding IIO devices: {e}")
    
    logging.info(f"Found devices: {devices}")
    return devices

# Global variables for sensor data with better initialization
ph_value = 7.0
temp_value = 25.0
humidity_value = 50.0
thermal_min_temp = 20.0
thermal_max_temp = 30.0
thermal_mean_temp = 25.0
thermal_median_temp = 25.0
thermal_range_temp = 10.0
thermal_mode_temp = 25.0
thermal_std_dev_temp = 2.5
thermal_data_available = False

def fetch_thermal_data():
    """Fetch thermal camera data from ESP32-S3"""
    global thermal_min_temp, thermal_max_temp, thermal_mean_temp, thermal_median_temp
    global thermal_range_temp, thermal_mode_temp, thermal_std_dev_temp, thermal_data_available
    
    try:
        # Try multiple possible thermal camera IP addresses
        thermal_camera_ips = ['192.168.1.176', '192.168.1.100', '192.168.1.101', '192.168.1.102']
        
        for ip in thermal_camera_ips:
            try:
                response = requests.get(f'http://{ip}/thermal_data', timeout=2)
                if response.status_code == 200:
                    data = response.json()
                    thermal_min_temp = data.get('minTemp', thermal_min_temp)
                    thermal_max_temp = data.get('maxTemp', thermal_max_temp)
                    thermal_mean_temp = data.get('meanTemp', thermal_mean_temp)
                    thermal_median_temp = data.get('medianTemp', thermal_median_temp)
                    thermal_range_temp = data.get('rangeTemp', thermal_range_temp)
                    thermal_mode_temp = data.get('modeTemp', thermal_mode_temp)
                    thermal_std_dev_temp = data.get('stdDevTemp', thermal_std_dev_temp)
                    thermal_data_available = True
                    logging.info(f"Thermal camera data updated successfully from {ip}/thermal_data")
                    return
            except requests.exceptions.RequestException:
                continue
        
        # If no camera found, simulate realistic thermal data for testing
        thermal_data_available = False
        import random
        base_temp = 22.0 + random.uniform(-2, 3)  # Room temperature range
        thermal_min_temp = base_temp + random.uniform(-5, -2)
        thermal_max_temp = base_temp + random.uniform(3, 8)
        thermal_mean_temp = base_temp + random.uniform(-1, 2)
        thermal_median_temp = base_temp + random.uniform(-1, 1)
        thermal_range_temp = thermal_max_temp - thermal_min_temp
        thermal_mode_temp = base_temp + random.uniform(-0.5, 0.5)
        thermal_std_dev_temp = random.uniform(1.5, 3.5)
        logging.warning("No thermal camera found, using simulated data")
            
    except Exception as e:
        thermal_data_available = False
        logging.error(f"Error fetching thermal data: {e}")
        # Keep previous values or use defaults

# Fetch thermal camera data
fetch_thermal_data()

def update_sensor_data():
    """Update sensor data from BeagleConnect Freedom and thermal camera"""
    global ph_value, temp_value, humidity_value
    
    devices = find_iio_devices()
    logging.info(f"Available devices: {devices}")
    
    while True:
        # Update BeagleConnect Freedom data
        if "ph" in devices:
            ph_reading = read_sensor_value(devices["ph"], "ph")
            if ph_reading is not None:
                ph_value = ph_reading
                logging.info(f"pH updated to: {ph_value}")
        else:
            logging.warning("pH sensor not found in IIO devices")
        
        if "temperature" in devices:
            temp_reading = read_sensor_value(devices["temperature"], "temp")
            if temp_reading is not None:
                temp_value = temp_reading
                logging.info(f"Temperature updated to: {temp_value}")
        else:
            logging.warning("Temperature sensor not found in IIO devices")
        
        if "humidity" in devices:
            humidity_reading = read_sensor_value(devices["humidity"], "humidity")
            if humidity_reading is not None:
                humidity_value = humidity_reading
                logging.info(f"Humidity updated to: {humidity_value}")
        else:
            logging.warning("Humidity sensor not found in IIO devices")
        
        # Update thermal camera data
        fetch_thermal_data()
        
        # Log the values
        logging.info(f"Updated sensor values - pH: {ph_value}, Temp: {temp_value}Â°C, Humidity: {humidity_value}%")
        
        # Wait before next update
        time.sleep(5)

# Start the sensor update thread
sensor_thread = threading.Thread(target=update_sensor_data, daemon=True)
sensor_thread.start()

# HTTP request handler
class SensorHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            
            # Calculate VPD
            # VPD = (1 - RH/100) * SVP
            # SVP (Saturation Vapor Pressure) = 0.6108 * exp(17.27 * T / (T + 237.3))
            # where T is temperature in Celsius and RH is relative humidity in percent
            import math
            svp = 0.6108 * math.exp(17.27 * temp_value / (temp_value + 237.3))
            vpd = (1 - humidity_value / 100) * svp
            
            # Create HTML response with improved dark mode, landscape layout, and timestamp header
            current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            html = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <title>Greenhouse Monitoring</title>
                <meta http-equiv="refresh" content="5">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <style>
                    /* Dark mode theme */
                    body {{ 
                        font-family: Arial, sans-serif; 
                        margin: 0; 
                        padding: 20px; 
                        background-color: #121212; 
                        color: #e0e0e0; 
                    }}
                    
                    /* Header styling */
                    .header {{ 
                        background-color: #1e1e1e; 
                        padding: 15px 20px; 
                        border-radius: 5px; 
                        margin-bottom: 20px; 
                        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3); 
                        text-align: center;
                    }}
                    
                    h1 {{ 
                        color: #ffffff; 
                        margin: 0; 
                        padding: 0; 
                    }}
                    
                    h2 {{ 
                        color: #ffffff; 
                        margin-top: 0; 
                    }}
                    
                    /* Timestamp header styling */
                    .timestamp-header {{ 
                        color: #4caf50; 
                        font-style: italic; 
                        margin: 10px 0 0 0; 
                        font-size: 16px; 
                        font-weight: normal; 
                    }}
                    
                    /* Dashboard container for landscape layout */
                    .dashboard-container {{ 
                        display: flex; 
                        flex-wrap: wrap; 
                        justify-content: space-between; 
                        gap: 20px; /* Modern spacing between items */
                    }}
                    
                    /* Sensor box styling */
                    .sensor-box {{ 
                        border: 1px solid #333; 
                        padding: 20px; 
                        border-radius: 8px; 
                        flex: 1; 
                        min-width: 200px; 
                        background-color: #1e1e1e; 
                        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3); 
                        transition: transform 0.2s ease; /* Smooth hover effect */
                    }}
                    
                    .sensor-box:hover {{ 
                        transform: translateY(-5px); 
                    }}
                    
                    /* Sensor value styling */
                    .sensor-value {{ 
                        font-size: 28px; 
                        font-weight: bold; 
                        color: #4caf50; 
                        margin-top: 10px; 
                        text-align: center; 
                    }}
                    
                    /* Footer timestamp */
                    .timestamp {{ 
                        color: #888; 
                        margin-top: 20px; 
                        text-align: center; 
                        font-size: 14px; 
                    }}
                    
                    /* Responsive adjustments */
                    @media (max-width: 768px) {{ 
                        .dashboard-container {{ 
                            flex-direction: column; 
                        }}
                        .sensor-box {{ 
                            margin-bottom: 15px; 
                        }}
                    }}
                </style>
            </head>
            <body>
                <div class="header">
                    <h1>Greenhouse Monitoring Dashboard (Port {PORT})</h1>
                    <div class="timestamp-header">Data acquired on: {current_time}</div>
                    <div style="color: #888; font-size: 12px; margin-top: 10px;">
                        BeagleConnect Freedom + Thermal Camera Integration<br>
                        Credits: Enhanced by Windsurf AI | BeagleBoard.org Foundation
                    </div>
                </div>
                
                <h2 style="color: #4caf50; text-align: center; margin: 20px 0;">BeagleConnect Freedom Sensors</h2>
                <div class="dashboard-container">
                    <div class="sensor-box">
                        <h2>pH Value</h2>
                        <div class="sensor-value">{ph_value}</div>
                    </div>
                    
                    <div class="sensor-box">
                        <h2>Temperature</h2>
                        <div class="sensor-value">{temp_value:.2f} Â°C</div>
                    </div>
                    
                    <div class="sensor-box">
                        <h2>Humidity</h2>
                        <div class="sensor-value">{humidity_value:.2f} %</div>
                    </div>
                    
                    <div class="sensor-box">
                        <h2>Vapor Pressure Deficit (VPD)</h2>
                        <div class="sensor-value">{vpd:.2f} kPa</div>
                    </div>
                </div>
                
                <h2 style="color: #4caf50; text-align: center; margin: 20px 0;">Thermal Camera Statistics</h2>
                <div class="dashboard-container">
                    <div class="sensor-box">
                        <h2>Min Temperature</h2>
                        <div class="sensor-value">{thermal_min_temp:.2f} Â°C</div>
                    </div>
                    
                    <div class="sensor-box">
                        <h2>Max Temperature</h2>
                        <div class="sensor-value">{thermal_max_temp:.2f} Â°C</div>
                    </div>
                    
                    <div class="sensor-box">
                        <h2>Mean Temperature</h2>
                        <div class="sensor-value">{thermal_mean_temp:.2f} Â°C</div>
                    </div>
                    
                    <div class="sensor-box">
                        <h2>Median Temperature</h2>
                        <div class="sensor-value">{thermal_median_temp:.2f} Â°C</div>
                    </div>
                    
                    <div class="sensor-box">
                        <h2>Temperature Range</h2>
                        <div class="sensor-value">{thermal_range_temp:.2f} Â°C</div>
                    </div>
                    
                    <div class="sensor-box">
                        <h2>Mode Temperature</h2>
                        <div class="sensor-value">{thermal_mode_temp:.2f} Â°C</div>
                    </div>
                    
                    <div class="sensor-box">
                        <h2>Std Dev Temperature</h2>
                        <div class="sensor-value">{thermal_std_dev_temp:.2f} Â°C</div>
                    </div>
                    
                    <div class="sensor-box" style="background-color: #2d2d2d;">
                        <h2>Thermal Status</h2>
                        <div class="sensor-value" style="color: {'#4caf50' if thermal_data_available else '#f44336'}">
                            {'Connected' if thermal_data_available else 'Simulated (Camera Disconnected)'}
                        </div>
                    </div>
                </div>
                
                <div class="timestamp">Last updated: {current_time}</div>
                
                <script>
                    // Force dark mode at the browser level as well
                    document.documentElement.style.colorScheme = 'dark';
                </script>
            </body>
            </html>
            """
            
            self.wfile.write(html.encode())
            logging.info(f"Served sensor data - pH: {ph_value}, Temp: {temp_value}Â°C, Humidity: {humidity_value}%, VPD: {vpd:.2f} kPa")
            return
        
        # For JSON API endpoint
        elif self.path == '/api/sensors':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            
            # Calculate VPD
            svp = 0.6108 * math.exp(17.27 * temp_value / (temp_value + 237.3))
            vpd = (1 - humidity_value / 100) * svp
            
            data = {
                'ph': ph_value,
                'temperature': temp_value,
                'humidity': humidity_value,
                'vpd': round(vpd, 2),
                'thermal_min_temp': thermal_min_temp,
                'thermal_max_temp': thermal_max_temp,
                'thermal_mean_temp': thermal_mean_temp,
                'thermal_median_temp': thermal_median_temp,
                'thermal_range_temp': thermal_range_temp,
                'thermal_mode_temp': thermal_mode_temp,
                'thermal_std_dev_temp': thermal_std_dev_temp,
                'timestamp': datetime.now().isoformat()
            }
            
            self.wfile.write(json.dumps(data).encode())
            return
            
        return http.server.SimpleHTTPRequestHandler.do_GET(self)
    
    def log_message(self, format, *args):
        # Override to use our logger instead of printing to stderr
        logging.info("%s - %s" % (self.address_string(), format % args))

# Run the server on port 8082 instead of 8080
PORT = 8082
with socketserver.TCPServer(("", PORT), SensorHandler) as httpd:
    print(f"Greenhouse server running at http://localhost:{PORT}")
    print(f"Access dashboard at: http://192.168.1.203:{PORT}/")
    logging.info(f"Server started on port {PORT}")
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass
    finally:
        httpd.server_close()
        logging.info("Server stopped")
